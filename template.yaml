AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Orders REST API
  
Globals:
  Function:
    Timeout: 3

Parameters:

  TableName:
    Type: String
    Default: 'orders'
    Description: Name of the orders table
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

  OrderStatusUpdateTopicName:
    Type: String
    Description: Name of topic for status updates
    ConstraintDescription: 'Required'

Resources:

  OrdersRESTAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      Auth:
        Authorizers:
          TokenAuthorizer:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: "https://dev--isxkzf0.auth0.com/"
              audience:
                - orders-api-prod
        DefaultAuthorizer: TokenAuthorizer

  CreateOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      PackageType: Image
      ImageUri: ECR URL
      ImageConfig:
        Command: ["lambdas.postOrderLambda"]
      Events:
        CreateOrder:
          Type: HttpApi
          Properties:
            ApiId: !Ref OrdersRESTAPI
            Path: /orders
            Method: post
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: .
      Dockerfile: Dockerfile

  GetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      PackageType: Image
      ImageUri: ECR URL
      ImageConfig:
        Command: [ "lambdas.getOrderLambda" ]
      Events:
        GetOrder:
          Type: HttpApi
          Properties:
            ApiId: !Ref OrdersRESTAPI
            Path: /orders/{id}
            Method: get
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: .
      Dockerfile: Dockerfile

  PatchOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      PackageType: Image
      ImageUri: ECR URL
      ImageConfig:
        Command: [ "lambdas.patchOrderLambda" ]
      Events:
        PatchOrder:
          Type: HttpApi
          Properties:
            ApiId: !Ref OrdersRESTAPI
            Path: /orders/{id}
            Method: patch
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: .
      Dockerfile: Dockerfile

  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref TableName
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  RecordProcessor:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Policies:
        - AmazonSNSFullAccess
        - AWSLambdaDynamoDBExecutionRole
      ImageUri: ECR URL
      ImageConfig:
        Command: [ "lambdas.recordProcessor" ]
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt Table.StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
      Environment:
        Variables:
          ORDER_STATUS_UPDATE_TOPIC: !Ref OrderStatusUpdateTopic
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: .
      Dockerfile: Dockerfile

  OrderStatusUpdateTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref OrderStatusUpdateTopicName

Outputs:
  CreateOrdersFunction:
    Description: "Function ARN"
    Value: !GetAtt CreateOrdersFunction.Arn
  CreateOrdersFunctionIamRole:
    Description: "Implicit IAM Role created for function"
    Value: !GetAtt CreateOrdersFunctionRole.Arn
  GetOrdersFunction:
    Description: "Function ARN"
    Value: !GetAtt GetOrderFunction.Arn
  GetOrdersFunctionIamRole:
    Description: "Implicit IAM Role created for function"
    Value: !GetAtt GetOrderFunctionRole.Arn
  TableArn:
    Description: "Table ARN"
    Value: !GetAtt Table.Arn
